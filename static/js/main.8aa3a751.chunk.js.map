{"version":3,"sources":["config/theme.js","action/action.js","card.js","App.js","serviceWorker.js","reducer/reducer.js","index.js"],"names":["Theme","fun","style","backgroundColor","sport","art","SaveRequest","obj","type","SaveChange","useStyles","makeStyles","theme","button","margin","spacing","modal","display","alignItems","justifyContent","paper","palette","background","border","boxShadow","shadows","padding","useStyle","card","maxWidth","media","height","flexDirection","Fade","React","forwardRef","props","ref","open","in","children","onEnter","onExited","other","useSpring","from","opacity","to","onStart","onRest","div","connect","state","cards","dispatch","classe","classes","useState","setOpen","code","title","description","tag","cardView","setCardView","useEffect","audioUrl","sound","console","log","music","Audio","play","pause","className","Card","CardActionArea","CardMedia","image","CardContent","Typography","gutterBottom","variant","component","color","CardActions","Button","size","onClick","Modal","aria-labelledby","aria-describedby","onClose","closeAfterTransition","BackdropComponent","Backdrop","BackdropProps","timeout","TextField","onChange","e","target","value","id","label","endIcon","startIcon","Fab","rand","Math","floor","random","changCard","aria-label","axios","get","then","response","data","catch","error","Container","Grid","xs","md","lg","Boolean","window","location","hostname","match","init","Reducer","action","store","createStore","applyMiddleware","logger","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6SAmBeA,EAnBD,CACZC,IAAK,CACHC,MAAO,CACLC,gBAAiB,YAIrBC,MAAO,CACLF,MAAO,CACLC,gBAAiB,YAGrBE,IAAK,CACHH,MAAO,CACLC,gBAAiB,a,qECdVG,EAAc,SAACC,GAAD,MAAU,CACnCC,KAAM,eACND,IAAKA,IAGME,EAAa,SAACF,GAAD,MAAU,CAClCC,KAAM,cACND,IAAKA,I,8NCeP,IAAMG,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACrCC,OAAQ,CACNC,OAAQF,EAAMG,QAAQ,IAExBC,MAAO,CACLC,QAAS,OACTC,WAAY,SACZC,eAAgB,UAElBC,MAAO,CACLjB,gBAAiBS,EAAMS,QAAQC,WAAWF,MAC1CG,OAAQ,iBACRC,UAAWZ,EAAMa,QAAQ,GACzBC,QAASd,EAAMG,QAAQ,EAAG,EAAG,QAI3BY,EAAWhB,YAAW,CAC1BiB,KAAM,CACJC,SAAU,KAEZC,MAAO,CACLC,OAAQ,OAINf,EAAQ,CACZe,OAAQ,IACRd,QAAS,OACTe,cAAe,SACfb,eAAgB,gBAChBD,WAAY,UAGRe,EAAOC,IAAMC,YAAW,SAAeC,EAAOC,GAAM,IAC5CC,EAAgDF,EAApDG,GAAUC,EAA0CJ,EAA1CI,SAAUC,EAAgCL,EAAhCK,QAASC,EAAuBN,EAAvBM,SAAaC,EADK,YACKP,EADL,wCAEjDlC,EAAQ0C,oBAAU,CACtBC,KAAM,CAAEC,QAAS,GACjBC,GAAI,CAAED,QAASR,EAAO,EAAI,GAC1BU,QAAS,WACHV,GAAQG,GACVA,KAGJQ,OAAQ,YACDX,GAAQI,GACXA,OAKN,OACE,kBAAC,WAASQ,IAAV,eAAcb,IAAKA,EAAKnC,MAAOA,GAAWyC,GACvCH,MA2HP,IAQeW,eARS,SAACC,GAAD,MAAY,CAClCC,MAAOD,EAAM7C,QAGY,SAAC+C,GAAD,MAAe,CACxCA,SAAUA,KAGGH,EAvHf,SAAoBf,GAClB,IAAMmB,EAAS5B,IACT6B,EAAU9C,IAFS,EAGDwB,IAAMuB,UAAS,GAHd,mBAGlBnB,EAHkB,KAGZoB,EAHY,OAIOD,mBAAS,CACvCE,KAAM,EACNC,MAAO,WACPC,YAAa,+BACbC,IAAK,UARkB,mBAIlBC,EAJkB,KAIRC,EAJQ,KAyCzB,OAfAC,qBAAU,WACR,GAAsB,IAAlBF,EAASJ,KAAY,CACvB,IAAMO,EAAWH,EAASI,MAC1BC,QAAQC,IAAI,QAASH,GACrB,IAAII,EAAQ,IAAIC,MAAML,GACtBI,EAAME,OAGR,OAAO,WACiB,IAAlBT,EAASJ,MACXW,EAAMG,WAGT,CAACV,EAASJ,OACfS,QAAQC,IAAI,aAAcN,GAEtB,yBAAKW,UAAU,SACb,kBAACC,EAAA,EAAD,CAAMzE,MAAOF,EAAM+D,EAASD,KAAK5D,OAC/B,kBAAC0E,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEH,UAAWnB,EAAOzB,MAClBgD,MAAyB,IAAlBf,EAASJ,KAAaI,EAASe,MAAQ,GAC9ClB,MAAOG,EAASH,QAElB,kBAACmB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,cAAY,EAACC,QAAQ,KAAKC,UAAU,MAC7CpB,EAASH,OAEZ,kBAACoB,EAAA,EAAD,CAAYE,QAAQ,QAAQE,MAAM,gBAAgBD,UAAU,KACzDpB,EAASF,eAIhB,kBAACwB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAQC,KAAK,QAAQH,MAAM,UAAUI,QAjD1B,WACjB9B,GAAQ,KAgDF,SAGA,kBAAC+B,EAAA,EAAD,CACEC,kBAAgB,qBAChBC,mBAAiB,2BACjBjB,UAAWlB,EAAQxC,MACnBsB,KAAMA,EACNsD,QArDU,WAClBlC,GAAQ,IAqDAmC,sBAAoB,EACpBC,kBAAmBC,IACnBC,cAAe,CACbC,QAAS,MAGX,kBAAC,EAAD,CAAM1D,GAAID,GACR,yBAAKpC,MAAOc,EAAO0D,UAAWlB,EAAQpC,OACpC,kBAAC8E,EAAA,EAAD,CAAWC,SAAU,SAACC,GAAD,OAAOpC,E,yWAAY,CAAD,GAAMD,EAAN,CAAgBH,MAAOwC,EAAEC,OAAOC,UAAUC,GAAG,iBAAiBC,MAAM,QAAQtB,QAAQ,aAC3H,kBAACgB,EAAA,EAAD,CAAWK,GAAG,iBAAiBC,MAAM,cAActB,QAAQ,aAC3D,yBAAKR,UAAU,gBACb,kBAACY,EAAA,EAAD,CACEE,QAAS,SAACY,GAzD1BhE,EAAMkB,SAAS7C,EAAWsD,KA0DVmB,QAAQ,YACRE,MAAM,UACNV,UAAWlB,EAAQ3C,OACnB4F,QAAS,kBAAC,IAAD,OALX,QASA,kBAACnB,EAAA,EAAD,CACEJ,QAAQ,YACRE,MAAM,YACNV,UAAWlB,EAAQ3C,OACnB6F,UAAW,kBAAC,IAAD,OAJb,gBAcZ,6BACA,kBAACC,EAAA,EAAD,CAAKnB,QAAS,kBArFlB,WACE,IAAMoB,EAAOC,KAAKC,MAAsB,EAAhBD,KAAKE,UAC7B/C,EAAY5B,EAAMiB,MAAMA,MAAMuD,IAmFRI,IAAa5B,MAAM,UAAU6B,aAAW,OAC1D,kBAAC,IAAD,W,mCChKR,IAIe9D,eAJY,SAACG,GAAD,MAAe,CACxCA,SAAUA,KAGGH,EA5Bf,SAAcf,GAWZ,OAVA6B,qBAAU,WACRiD,IAAMC,IAAI,yCACPC,MAAK,SAAUC,GACdjD,QAAQC,IAAI,OAAQgD,EAASC,MAC7BlF,EAAMkB,SAAShD,EAAY+G,EAASC,UAErCC,OAAM,SAAUC,GACfpD,QAAQC,IAAImD,QAEf,IAGD,kBAACC,EAAA,EAAD,CAAW5F,SAAS,MAClB,kBAAC6F,EAAA,EAAD,CACEC,GAAI,GACJC,GAAI,GACJC,GAAI,GAEJ,kBAAC,EAAD,WCfYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,qlBClBN,IAAMC,EAAO,CACX5H,IAAK,IAkBQ6H,EAhBC,WAA2B,IAA1BhF,EAAyB,uDAAjB+E,EAAME,EAAW,uCACxC,OAAQA,EAAO7H,MACb,IAAK,eAKL,IAAK,cACH,OAAO,KACF4C,EADL,CAEE7C,IAAK8H,EAAO9H,MAEhB,QACE,OAAO6C,I,iBCNPkF,EAAQC,YAAYH,EAASI,YAAgBC,MAEnDC,IAASC,OAAO,kBAAC,IAAD,CAAUL,MAAOA,GAAO,kBAAC,EAAD,OAAoBM,SAASC,eAAe,SFqH9E,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5B,MAAK,SAAA6B,GACjCA,EAAaC,iB","file":"static/js/main.8aa3a751.chunk.js","sourcesContent":["const Theme = {\n  fun: {\n    style: {\n      backgroundColor: '#EAC435'\n    }\n\n  },\n  sport: {\n    style: {\n      backgroundColor: '#0ACFFF'\n    }\n  },\n  art: {\n    style: {\n      backgroundColor: '#EE6352'\n    }\n  }\n}\n\nexport default Theme\n","export const SaveRequest = (obj) => ({\n  type: 'SAVE_REQUEST',\n  obj: obj\n})\n\nexport const SaveChange = (obj) => ({\n  type: 'SAVE_CHANGE',\n  obj: obj\n})\n","import React, { useState, useEffect } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Card from '@material-ui/core/Card'\nimport CardActionArea from '@material-ui/core/CardActionArea'\nimport CardActions from '@material-ui/core/CardActions'\nimport CardContent from '@material-ui/core/CardContent'\nimport CardMedia from '@material-ui/core/CardMedia'\nimport Button from '@material-ui/core/Button'\nimport Typography from '@material-ui/core/Typography'\nimport { connect } from 'react-redux'\nimport Fab from '@material-ui/core/Fab'\nimport AddIcon from '@material-ui/icons/Add'\nimport Theme from './config/theme'\nimport PropTypes from 'prop-types'\nimport Modal from '@material-ui/core/Modal'\nimport Backdrop from '@material-ui/core/Backdrop'\nimport { useSpring, animated } from 'react-spring/web.cjs'\nimport TextField from '@material-ui/core/TextField'\nimport DeleteIcon from '@material-ui/icons/Delete'\nimport SaveIcon from '@material-ui/icons/Save'\nimport { SaveChange } from './action/action'\n\nconst useStyles = makeStyles(theme => ({\n  button: {\n    margin: theme.spacing(1)\n  },\n  modal: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  paper: {\n    backgroundColor: theme.palette.background.paper,\n    border: '1px solid #ccc',\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(5, 5, 5)\n  }\n}))\n\nconst useStyle = makeStyles({\n  card: {\n    maxWidth: 345\n  },\n  media: {\n    height: 140\n  }\n})\n\nconst modal = {\n  height: 200,\n  display: 'flex',\n  flexDirection: 'column',\n  justifyContent: 'space-between',\n  alignItems: 'center'\n}\n\nconst Fade = React.forwardRef(function Fade (props, ref) {\n  const { in: open, children, onEnter, onExited, ...other } = props\n  const style = useSpring({\n    from: { opacity: 0 },\n    to: { opacity: open ? 1 : 0 },\n    onStart: () => {\n      if (open && onEnter) {\n        onEnter()\n      }\n    },\n    onRest: () => {\n      if (!open && onExited) {\n        onExited()\n      }\n    }\n  })\n\n  return (\n    <animated.div ref={ref} style={style} {...other}>\n      {children}\n    </animated.div>\n  )\n})\n\nFade.propTypes = {\n  children: PropTypes.element,\n  in: PropTypes.bool.isRequired,\n  onEnter: PropTypes.func,\n  onExited: PropTypes.func\n}\n\nfunction MediaCard (props) {\n  const classe = useStyle()\n  const classes = useStyles()\n  const [open, setOpen] = React.useState(false)\n  const [cardView, setCardView] = useState({\n    code: 1,\n    title: 'Exercise',\n    description: 'Exercise on a regular basis.',\n    tag: 'sport'\n  })\n\n  const handleOpen = () => {\n    setOpen(true)\n  }\n\n  const handleClose = () => {\n    setOpen(false)\n  }\n\n  function changCard () {\n    const rand = Math.floor(Math.random() * 5)\n    setCardView(props.cards.cards[rand])\n  }\n  function saveChanges () {\n    props.dispatch(SaveChange(cardView))\n  }\n  useEffect(() => {\n    if (cardView.code === 2) {\n      const audioUrl = cardView.sound\n      console.log('sound', audioUrl)\n      var music = new Audio(audioUrl)\n      music.play()\n    }\n\n    return () => {\n      if (cardView.code === 2) {\n        music.pause()\n      }\n    }\n  }, [cardView.code])\nconsole.log('sttttttttt', cardView)\n  return (\n    <div className='cards'>\n      <Card style={Theme[cardView.tag].style}>\n        <CardActionArea>\n          <CardMedia\n            className={classe.media}\n            image={cardView.code === 0 ? cardView.image : ''}\n            title={cardView.title}\n          />\n          <CardContent>\n            <Typography gutterBottom variant='h5' component='h2'>\n              {cardView.title}\n            </Typography>\n            <Typography variant='body2' color='textSecondary' component='p'>\n              {cardView.description}\n            </Typography>\n          </CardContent>\n        </CardActionArea>\n        <CardActions>\n          <Button size='small' color='primary' onClick={handleOpen}>\n          Edite\n          </Button>\n          <Modal\n            aria-labelledby='spring-modal-title'\n            aria-describedby='spring-modal-description'\n            className={classes.modal}\n            open={open}\n            onClose={handleClose}\n            closeAfterTransition\n            BackdropComponent={Backdrop}\n            BackdropProps={{\n              timeout: 500\n            }}\n          >\n            <Fade in={open}>\n              <div style={modal} className={classes.paper}>\n                <TextField onChange={(e) => setCardView({ ...cardView, title: e.target.value })} id='outlined-basic' label='Title' variant='outlined' />\n                <TextField id='outlined-basic' label='Description' variant='outlined' />\n                <div className='modal-button'>\n                  <Button\n                    onClick={(e) => saveChanges(e)}\n                    variant='contained'\n                    color='primary'\n                    className={classes.button}\n                    endIcon={<SaveIcon />}\n                  >\n                  Save\n                  </Button>\n                  <Button\n                    variant='contained'\n                    color='secondary'\n                    className={classes.button}\n                    startIcon={<DeleteIcon />}\n                  >\n                    Delete\n                  </Button>\n                </div>\n              </div>\n            </Fade>\n          </Modal>\n        </CardActions>\n      </Card>\n      <br />\n      <Fab onClick={() => changCard()} color='primary' aria-label='add'>\n        <AddIcon />\n      </Fab>\n    </div>\n  )\n}\n\nconst mapStateToProps = (state) => ({\n  cards: state.obj\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n  dispatch: dispatch\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MediaCard)\n// connect(mapStateToProps, mapDispatchToProps, mergeProps, options)(component)\n","import React, { useEffect } from 'react'\nimport Card from './card'\nimport Container from '@material-ui/core/Container'\nimport Grid from '@material-ui/core/Grid'\nimport axios from 'axios'\nimport { connect } from 'react-redux'\nimport { SaveRequest } from './action/action'\n\nfunction App (props) {\n  useEffect(() => {\n    axios.get('http://static.pushe.co/challenge/json')\n      .then(function (response) {\n        console.log('rrrr', response.data)\n        props.dispatch(SaveRequest(response.data))\n      })\n      .catch(function (error) {\n        console.log(error)\n      })\n  }, [])\n  return (\n\n    <Container maxWidth='lg'>\n      <Grid\n        xs={12}\n        md={12}\n        lg={6}\n      >\n        <Card />\n      </Grid>\n    </Container>\n  )\n}\nconst mapDispatchToProps = (dispatch) => ({\n  dispatch: dispatch\n})\n\nexport default connect(mapDispatchToProps)(App)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","const init = {\n  obj: ''\n}\nconst Reducer = (state = init, action) => {\n  switch (action.type) {\n    case 'SAVE_REQUEST':\n      return {\n        ...state,\n        obj: action.obj\n      }\n    case 'SAVE_CHANGE':\n      return {\n        ...state,\n        obj: action.obj\n      }\n    default:\n      return state\n  }\n}\nexport default Reducer\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport { Provider } from 'react-redux'\nimport { createStore, applyMiddleware } from 'redux'\nimport Reducer from './reducer/reducer'\nimport logger from 'redux-logger'\n\nconst store = createStore(Reducer, applyMiddleware(logger))\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}